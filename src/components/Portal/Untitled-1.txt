interface Test123 {
  partCode: string;
  name: string;
  id: string;
  value:string;
}

const CodeInput = () => {
  const test123: Test123 = {
    partCode: "",
    name: "pirmas",
    id: "1",
    value:"",
  };
  const [inputList, setInputList] = useState<Test123[]>([test123]);

  // handle input change
  // const handleInputChange = (event: any, index: number) => {
  //   const { name, value } = event.target;
  //   const list = [...inputList];
  //   list[index] = value;
  //   setInputList(list);
  // };
  
  

  // handle click event of the Pridėti dar vieną kodą button
  const handleAddClick = () => {
    setInputList((prevState) => {
      const date = new Date();
      const stateCopy = [...prevState];

      const newCodeItem = {
        ...test123,
        id: date.getTime().toString(),
      };
      console.log(newCodeItem);
      stateCopy.push(newCodeItem);
      return stateCopy;
    });
  };
  // handle click event of the Pašalinti button
  const handleRemoveClick = (id: string) => {
    const updatedCodePart = inputList.filter((item) => {
      return item.id !== id || item.id === "1";
    });
    setInputList(updatedCodePart);
    
    // const list = [...inputList];
    // console.log(list);
    // list.splice(index, 1);
    // setInputList(list);
  };
  
  return (
    <div className="App">
      <label htmlFor="part code">Detalės kodas</label>
      {inputList.map((x, id) => {
        return (
          <div className="box">
            <input
              id={x.id}
              name="partCode"
              placeholder="Enter Code "
              
              // onChange={(e) => handleInputChange(e, id)}
        ></input>

            <div>
              
                <button onClick={() => handleRemoveClick(x.id)}>Pašalinti</button>
            
              <br />
              {inputList.length - 1 === id && (
                <button onClick={handleAddClick}>Pridėti dar vieną kodą</button>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default CodeInput;

// const [codes, setCodes] = useState([{}]);
// const addCodeHandler = () => {
//   setCodes((prevState) => {
//     const date = new Date();
//     const updatedItems = [...prevState];

//     const newCode = {
//       ...codes,
//       id: date.getTime(),
//     };

//     updatedItems.push(newCode);
//     return updatedItems;
//   });
// };
// const getModelOptions = (value: string, brands: CarCollectByBrand) => {
//   brands.option.map((item: OptionInterface) =>
//     item.title === value ? setModelsOptions(item.models) : null
//   );
// };